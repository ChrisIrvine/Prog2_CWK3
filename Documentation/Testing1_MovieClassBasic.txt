-----------------------------------movie.h-------------------------------------

/**
 * File:        movie.h
 *
 * Author:      ruw12gbu, 100036248
 *
 * Description: Header file for movie.cpp, containing the methods and variables
 *              used in the movie.cpp file.
 *
 * Version:     v1.0 - 29/03/2017 - created
 *              v1.0 - 30/03/2017 - edited to be stack compatible
 */

#ifndef PROG2_CWK3_MOVIE_H
#define PROG2_CWK3_MOVIE_H

#include <string>
#include <sstream>
#include <iostream>

namespace movie
{
    class Movie {
    public:
        /**
         * Inline Accessor and Mutator methods for the Movie class
         */
        //Declare title getters and setters
        inline void setTitle(std::string& newTitle){this->title = newTitle;}
        inline const std:: string getTitle() const {return this->title;};

        //Declare year getters and setters
        inline void setYear( unsigned int &newYear) {this->year = newYear;}
        inline const unsigned int& getYear() const {return this->year;}

        //Declare certificate getters and setters
        inline void setCert(std::string& newCert){
            this->certificate = newCert;
        }
        inline const std:: string getCert() const {return this->certificate;}

        //Declare genre getters and setters
        inline void setGenre(std::string& newGenre) {this->genre = newGenre;}
        inline const std:: string getGenre() const {return this->genre;}

        //Declare runtime getters and setters
        inline void setRuntime( unsigned int &newRuntime) {
            this->runtime = newRuntime;
        }
        inline const unsigned int& getRuntime() const {return this->runtime;}

        /**
         * Procedure:   Movie (customisable)
         *
         * Description: Customisable constructor for the Movie class that
         *              allows for each class variable of the object to be
         *              declared by the user.
         *
         * Returns:     A new Movie object
         *
         * Parameters:
         * @param newTitle - the title to be assigned to the new Movie object
         * @param newYear - the year to be assigned to the new Movie object
         * @param newCert - the certificate to be assigned to the new Movie
         *                  object
         * @param newGenre - the genres to be assigned to the new Movie object
         * @param newRuntime - the runtime to be assigned to the new Movie
         *                     object
         */
        Movie(const std::string &newTitle, const unsigned int newYear,
              const std::string newCert, const std::string &newGenre,
              const unsigned int newRuntime);

        /**
         * Procedure:   Movie (copy)
         *
         * Description: Copy Constructor that takes a single movie object
         *              parameter and copies over the values held within the
         *              movie object.
         *
         * Returns:     A new movie object identical to the copyMovie object.
         *
         * Parameters:
         * @param copyMovie - movie object to be copies
         */
        Movie(const Movie &copyMovie);

        /**
         * Procedure:   Movie (destruct)
         *
         * Description: Destructor method for memory management applications,
         *              however as this class runs off the stack, there is no
         *              need for a destructor.
         *
         * Returns:     N/A
         *
         * Parameters:  N/A
         */
        ~Movie();

        /**
         * Procedure:   write
         *
         * Description: Writer method that acts in a similar manner to the
         *              String Builder / toString() method that exists in
         *              Java.
         *
         * Returns:     An overloaded output stream containing an informational
         *              printout of the object.
         *
         * Parameters:
         * @param stream - stream to overload
         * @return
         */
        std::ostream &write(std::ostream &stream) const;

    private:
        std:: string title;
        unsigned int year;
        std:: string certificate;
        std:: string genre;
        unsigned int runtime;
    };

    /**
     * Procedure:   operator<<
     *
     * Description: Overload method to allow for quick informational prints of
     *              the object to be submitted through the output.
     *
     * Returns:     Overloaded output operator
     *
     * Parameters:
     * @param stream - output stream
     * @param movie - movie object to retrieve the information from
     * @return
     */
    inline std::ostream& operator<< (std::ostream &stream
            , const Movie& movie) {
        return movie.write(stream);
    }

    std::istream& operator>> (std::istream& stream, const Movie& movie);
}

#endif //PROG2_CWK3_MOVIE_H


------------------------------------movie.cpp----------------------------------

/**
 * File:        Movie.cpp
 *
 * Author:      ruw12gbu, 100036248
 *
 * Description: Source code of the movie class declared in Movie.h create movie
 *              objects that are generated from the movies.txt file; containing
 *              details such as the title, year, rating-certificate, genre and
 *              runtime (in minutes). movies.txt is passed in through main.cpp
 *              before it is broken down and separated into individual movie
 *              objects. At this stage there is no file input, I am just
 *              testing the methods before I get to that stage.
 *
 * Version:     v1.0 - 29/03/2017 - created.
 *              v2.0 - 30/03/2017 - edited to be stack compatible
 */
#include "Movie.h"

namespace movie {

    //Initialise the customisable constructor method
    Movie::Movie(const std::string &newTitle, const unsigned int newYear,
                 const std::string newCert, const std::string &newGenre,
                 const unsigned int newRuntime) {
        //Assign variable values to the object variables
        this->title = newTitle;
        this->year = newYear;
        this->certificate = newCert;
        this->genre = newGenre;
        this->runtime = newRuntime;
    }

    //Initialise the copy constructor method
    Movie::Movie(const Movie &copyMovie){
        //Copy over the variables
        this->title = copyMovie.getTitle();
        this->year = copyMovie.getYear();
        this->certificate = copyMovie.getCert();
        this->genre = copyMovie.getGenre();
        this->runtime = copyMovie.getRuntime();
    }

    //Destructor, doesn't need to do anything as stack not heap
    Movie::~Movie() {   }

    //Initialise the write() method, acts like a toString() stringbuilder
    //method from java
    std::ostream &Movie::write(std::ostream &stream) const {
        stream << "\"" << this->title<< "\","
               << this->year << ","
               << "\"" << this->certificate << "\","
               << "\"" << this->genre << "\","
               << this->runtime << ",0,0";

        return stream;
    }
}

---------------------------------main.cpp--------------------------------------

/**
 * File:        main.cpp
 *
 * Author:      ruw12gbu, 100036248
 *
 * Description: Test Driver for the Movie.cpp and Movie.h files. At this stage
 *              the expected output is...
 *          "Lord of the Rings",2005,"PG-13","Action/Adventure/Fantasy",140,0,0
 *          "Lord of the Rings",2005,"PG-13","Action/Adventure/Fantasy",140,0,0
 *          "Rogue One",2016,"PG-13","Science Fiction/Action/Adventure",134,0,0
 *
 * Version:     v1.0 - 30/03/2017 - created
 */
#include <iostream>
#include "Movie.h"

using namespace movie;

int main() {

    //Initialise test variables
    std:: string testTitle("Rogue One");
    unsigned int testYear = 2016;
    std:: string testCert("PG-13");
    std:: string testGenre("Science Fiction/Action/Adventure");
    unsigned int testRuntime = 135;

    //Test Default constructor
    Movie lotr("Lord of the Rings", 2005, "PG-13", "Action/Adventure/Fantasy",
               140);
    std::cout << lotr << std::endl;

    //Test copy constructor
    Movie copyCat(lotr);
    std::cout << copyCat << std::endl;

    //Test customisable constructor
    Movie rogue(testTitle, testYear, testCert, testGenre, testRuntime);
    std::cout << rogue << std::endl;

    return 0;
}

----------------------------------OUTPUT---------------------------------------

"C:\Users\Christopher Irvine\Documents\Programming\Prog2_CWK3\cmake-build-debug
\Prog2_CWK3.exe"
"Lord of the Rings",2005,"PG-13","Action/Adventure/Fantasy",140,0,0
"Lord of the Rings",2005,"PG-13","Action/Adventure/Fantasy",140,0,0
"Rogue One",2016,"PG-13","Science Fiction/Action/Adventure",135,0,0

Process finished with exit code 0